{"version":3,"sources":["utils/user.js","components/UserForm.js","components/NavigatorTab.js","components/Navigator.js","components/repos/ActivityItem.js","components/repos/RepoItem.js","components/UserBio.js","components/UserProfile.js","App.js","serviceWorker.js","index.js"],"names":["UserUtilities","getUserProfile","username","a","fetch","method","headers","data","json","getUserRepos","getUserActivity","getUserAccountField","fieldName","JSON","parse","setUserAccountField","userData","UserForm","useState","setUsername","userUtil","id","onSubmit","then","console","log","localStorage","setItem","stringify","catch","error","type","placeholder","value","onChange","e","target","NavigatorTab","iconType","showData","onClick","name","Navigator","children","showRepos","showActivity","navigatorTabs","setNavigatorTabs","setRepoData","setActivityData","useEffect","getItem","repoCount","tabs","concat","loadFunction","map","tab","key","style","margin","ActivityItem","activityMessage","repoName","activityDate","className","fontStyle","split","RepoItem","repoURL","repoImage","createDate","modifyDate","language","href","display","UserBio","image","location","profileURL","navigatorDisplay","setNavigatorDisplay","setUserData","setActivityIcon","activityType","setRepoIcon","src","alt","fontSize","userActivityData","userActivity","activity","index","push","repo","created_at","showActivityData","userRepoData","html_url","Date","toDateString","updated_at","showRepoData","UserProfile","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fae49816.chunk.js","sourcesContent":["class UserUtilities {\r\n    getUserProfile = async (username) => {\r\n        let data = await fetch(`https://api.github.com/users/${username}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        return data.json();\r\n    }\r\n\r\n    getUserRepos = async (username) => {\r\n        let data = await fetch(`https://api.github.com/users/${username}/repos`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        return data.json();\r\n    }\r\n\r\n    getUserActivity = async (username) => {\r\n        let data = await fetch(`https://api.github.com/users/${username}/received_events`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        return data.json();\r\n    }\r\n\r\n    getUserAccountField = (data, fieldName) => {\r\n        const dataObj = JSON.parse(data);\r\n\r\n        return dataObj[fieldName];\r\n    }\r\n\r\n    setUserAccountField = (userData, fieldName) => {\r\n        return this.getUserAccountField(\r\n            userData,\r\n            fieldName\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserUtilities","import React, {useState} from \"react\";\r\nimport UserUtilities from \"../utils/user\";\r\n\r\nconst UserForm = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [returnData, setReturnData] = useState(\"\");\r\n\r\n    const userUtil = new UserUtilities();\r\n\r\n    const handleFormSubmit = () => {\r\n        userUtil.getUserProfile(username)\r\n            .then(data => {\r\n                console.log(data);\r\n                localStorage.setItem(\"user-account-data\", JSON.stringify(data));\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div id=\"user-form\">\r\n            <form onSubmit={handleFormSubmit}>\r\n                <input type=\"text\" placeholder=\"GitHub username\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                <input type=\"submit\" value=\"Get account data\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserForm;","import React from \"react\";\r\n\r\nconst NavigatorTab = ({iconType, value, showData}) => {\r\n    return (\r\n        <div onClick={showData}>\r\n            <ion-icon name={iconType}></ion-icon>\r\n            <p>{value}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavigatorTab;","import React, {useState, useEffect} from \"react\";\r\nimport NavigatorTab from \"./NavigatorTab\";\r\nimport UserUtilities from \"../utils/user\";\r\n\r\nconst Navigator = ({children, showRepos, showActivity}) => {\r\n    const [navigatorTabs, setNavigatorTabs] = useState([]);\r\n    const [repoData, setRepoData] = useState(\"\");\r\n    const [activityData, setActivityData] = useState(\"\");\r\n\r\n    const userUtil = new UserUtilities();\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"user-account-data\")) {\r\n            const username = userUtil.setUserAccountField(localStorage.getItem(\"user-account-data\"), \"login\");\r\n            userUtil.getUserRepos(username)\r\n                .then(data => {\r\n                    setRepoData(JSON.stringify(data));\r\n                    localStorage.setItem(\"user-repos\", JSON.stringify(data));\r\n                })\r\n                .catch(error => {\r\n                    setRepoData(JSON.stringify(error));\r\n                });\r\n        } else {\r\n            setRepoData(\"\");\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"user-account-data\")) {\r\n            const username = userUtil.setUserAccountField(localStorage.getItem(\"user-account-data\"), \"login\");\r\n            userUtil.getUserActivity(username)\r\n                .then(data => {\r\n                    setActivityData(JSON.stringify(data));\r\n                    localStorage.setItem(\"user-activity\", JSON.stringify(data));\r\n                })\r\n                .catch(error => {\r\n                    setActivityData(JSON.stringify(error));\r\n                });\r\n        } else {\r\n            setActivityData(\"\");\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let repoCount = 0;\r\n        if (localStorage.getItem(\"user-account-data\")) {\r\n            repoCount = userUtil.setUserAccountField(localStorage.getItem(\"user-account-data\"), \"public_repos\");\r\n        }\r\n        if (repoCount > 0) {\r\n            setNavigatorTabs(tabs => tabs.concat(\r\n                {id: 1, iconType: 'code-slash-outline', value: 'Repos', loadFunction: showRepos},\r\n                {id: 2, iconType: 'git-branch-outline', value: 'Recent Activity', loadFunction: showActivity},\r\n                ))\r\n        } else {\r\n            setNavigatorTabs(tabs => tabs.concat(\r\n                {id: 1, iconType: 'git-branch-outline', value: 'Recent Activity', loadFunction: showActivity}\r\n            ))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div id=\"navigator\">\r\n            <nav>\r\n                {navigatorTabs.map(tab => {\r\n                    return <NavigatorTab key={tab.id} value={tab.value} iconType={tab.iconType} showData={tab.loadFunction} />\r\n                })}\r\n            </nav>\r\n            <hr style={{margin: '0px 10px 20px 10px'}} />\r\n            <div id=\"navigator-children\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigator;","import React from \"react\";\r\n\r\nconst ActivityItem = ({iconType, activityMessage, repoName, activityDate}) => {\r\n    return (\r\n        <div className=\"activity-item\">\r\n            <ion-icon name={iconType}></ion-icon>\r\n            <h5>{activityMessage}</h5>\r\n            <p><span style={{fontStyle: 'italic'}}>Repo: </span>{repoName.split(\"/\")[1]}</p>\r\n            <p><span style={{fontStyle: 'italic'}}>Created: </span>{activityDate}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActivityItem","import React from \"react\";\r\n\r\nconst RepoItem = ({repoURL, repoImage, repoName, createDate, modifyDate, language}) => {\r\n    return (\r\n        <a href={repoURL} target=\"_blank\" className=\"repo-item\">\r\n            <div style={{display: 'flex'}}>\r\n                <ion-icon name={repoImage}></ion-icon>\r\n                <div style={{display: 'block'}}>\r\n                    <h5>{repoName}</h5>\r\n                    <p><span>Create Date:</span> {createDate}</p>\r\n                    <p><span>Last Modify Date:</span> {modifyDate}</p>\r\n                    <p><span>Language:</span> {language}</p>\r\n                </div>\r\n            </div>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default RepoItem;","import React, {useEffect, useState} from \"react\";\r\nimport Navigator from \"./Navigator\";\r\nimport ActivityItem from \"./repos/ActivityItem\";\r\nimport RepoItem from \"./repos/RepoItem\";\r\nimport UserUtilities from \"../utils/user\";\r\n\r\n\r\nconst UserBio = ({image, name, username, location, profileURL}) => {\r\n    const [navigatorDisplay, setNavigatorDisplay] = useState(null);\r\n    const [userData, setUserData] = useState(\"\");\r\n    const userUtil = new UserUtilities();\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"user-account-data\")) {\r\n            setUserData(localStorage.getItem(\"user-account-data\"))\r\n        }\r\n    }, [localStorage.getItem(\"user-account-data\")])\r\n\r\n    const setActivityIcon = (activityType) => {\r\n        let iconType;\r\n        switch (activityType) {\r\n            case \"DeleteEvent\":\r\n                iconType = \"close-outline\";\r\n                break;\r\n            case \"CreateEvent\":\r\n                iconType = \"add-outline\";\r\n                break;\r\n            case \"PullRequestEvent\":\r\n                iconType = \"enter-outline\";\r\n                break;\r\n            default:\r\n                iconType = \"alert-outline\";\r\n        }\r\n\r\n        return iconType;\r\n    }\r\n\r\n    const setRepoIcon = (activityType) => {\r\n        let iconType;\r\n        switch (activityType) {\r\n            case \"JavaScript\":\r\n                iconType = \"logo-javascript\";\r\n                break;\r\n            case \"Python\":\r\n                iconType = \"logo-python\";\r\n                break;\r\n            case \"HTML\":\r\n                iconType = \"logo-html5\";\r\n                break;\r\n            default:\r\n                iconType = \"logo-ionic\";\r\n        }\r\n\r\n        return iconType;\r\n    }\r\n\r\n    const showActivityData = () => {\r\n        let userActivityData = [];\r\n        if (localStorage.getItem(\"user-activity\")) {\r\n            const userActivity = localStorage.getItem(\"user-activity\");\r\n            let data = JSON.parse(userActivity);\r\n            data.map((activity, index) => {\r\n                userActivityData.push({\r\n                    id: index,\r\n                    repoName: activity.repo.name,\r\n                    activityDate: activity.created_at,\r\n                    iconType: setActivityIcon(activity.type),\r\n                    activityMessage: activity.type\r\n                })\r\n            })\r\n        } else {\r\n            return [{id: 0, repoName: \"\", activityDate: \"\", iconType: \"\", activityMessage: \"\"}]\r\n        }\r\n\r\n        return userActivityData.map(activity => {\r\n            return (\r\n                <ActivityItem\r\n                    key={activity.id}\r\n                    repoName={activity.repoName}\r\n                    activityDate={activity.activityDate}\r\n                    iconType={activity.iconType}\r\n                    activityMessage={activity.activityMessage} />\r\n            )\r\n        });\r\n    }\r\n\r\n    const showRepoData = () => {\r\n        let userRepoData = [];\r\n        if (localStorage.getItem(\"user-repos\")) {\r\n            const userActivity = localStorage.getItem(\"user-repos\");\r\n            let data = JSON.parse(userActivity);\r\n            data.map((repo, index) => {\r\n                userRepoData.push({\r\n                    id: index,\r\n                    repoURL: repo.html_url,\r\n                    repoImage: setRepoIcon(repo.language),\r\n                    repoName: repo.name,\r\n                    createDate: new Date(repo.created_at).toDateString(),\r\n                    modifyDate: new Date(repo.updated_at).toDateString(),\r\n                    language: repo.language\r\n                })\r\n            })\r\n        } else {\r\n            return [{\r\n                id: 0,\r\n                repoURL: \"\",\r\n                repoImage: \"\",\r\n                repoName: \"\",\r\n                createDate: \"\",\r\n                modifyDate: \"\",\r\n                language: \"\"\r\n            }]\r\n        }\r\n\r\n        return userRepoData.map(repo => {\r\n            return (\r\n                <RepoItem\r\n                    key={repo.id}\r\n                    repoURL={repo.repoURL}\r\n                    createDate={repo.createDate}\r\n                    language={repo.language}\r\n                    modifyDate={repo.modifyDate}\r\n                    repoImage={repo.repoImage}\r\n                    repoName={repo.repoName} />\r\n            )\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div id=\"user-bio\">\r\n            <div id=\"user-bio-container\">\r\n                <img src={image} alt=\"No avatar\" />\r\n                <div style={{display: 'block'}}>\r\n                    <div style={{display: 'block', margin: '30px 0px 0px 0px'}}>\r\n                        <p style={{margin: '0px 0px 5px 0px', fontSize: '20px'}}>{name}</p>\r\n                        <div style={{display: 'flex'}}>\r\n                            <ion-icon name=\"location\"></ion-icon>\r\n                            <p style={{margin: '0px 0px 0px 5px', fontSize: '13px'}}>{location}</p>\r\n                        </div>\r\n                        <a href={profileURL}>{username}</a>\r\n                        <div id=\"other-info\">\r\n                            <p><span>Bio:</span> {userData ? userUtil.setUserAccountField(userData,\"bio\") : \"N/A\"}</p>\r\n                            <p><span>Company:</span> {userData ? userUtil.setUserAccountField(userData,\"company\") : \"N/A\"}</p>\r\n                            <p><span>Email:</span> {userData ? userUtil.setUserAccountField(userData,\"email\") : \"N/A\"}</p>\r\n                            <p><span>Hireable:</span> {userData ? userUtil.setUserAccountField(userData,\"hireable\") : \"N/A\"}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Navigator\r\n                showActivity={() => setNavigatorDisplay(\"activity\")}\r\n                showRepos={() => setNavigatorDisplay(\"repos\")}>\r\n                {navigatorDisplay === \"activity\"\r\n                    ? showActivityData()\r\n                    : navigatorDisplay === \"repos\"\r\n                        ? showRepoData()\r\n                        : null}\r\n            </Navigator>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserBio;","import React, {useEffect, useState} from \"react\";\r\nimport UserBio from \"./UserBio\";\r\nimport UserUtilities from \"../utils/user\";\r\n\r\nconst UserProfile = () => {\r\n    const [userData, setUserData] = useState(\"\");\r\n    const userUtil = new UserUtilities();\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"user-account-data\")) {\r\n            setUserData(localStorage.getItem(\"user-account-data\"))\r\n        }\r\n    }, [localStorage.getItem(\"user-account-data\")])\r\n\r\n\r\n    return (\r\n        <div id=\"user-profile\">\r\n            <UserBio\r\n                username={userData ? userUtil.setUserAccountField(userData,\"login\") : \"\"}\r\n                image={userData ? userUtil.setUserAccountField(userData,\"avatar_url\") : \"\"}\r\n                name={userData ? userUtil.setUserAccountField(userData,\"name\") : \"\"}\r\n                location={userData ? userUtil.setUserAccountField(userData,\"location\") : \"\"}\r\n                profileURL={userData ? userUtil.setUserAccountField(userData,\"html_url\") : \"\"}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserProfile ;","import React from 'react';\nimport UserForm from \"./components/UserForm\";\nimport UserProfile from \"./components/UserProfile\";\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n        <div id=\"toolbar\">\n            <p>GitHub Tracker</p>\n            <UserForm />\n        </div>\n        <UserProfile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}